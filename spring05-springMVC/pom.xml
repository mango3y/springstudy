<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

  <modelVersion>4.0.0</modelVersion>
  <groupId>cn.mango3y.springstudy</groupId>
  <artifactId>spring05-springMVC</artifactId>

  <packaging>war</packaging>

  <version>1.0-SNAPSHOT</version>
  <name>spring05-springMVC Maven Webapp</name>
  <url>http://maven.apache.org</url>

  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>3.8.1</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
      <version>1.18.32</version>
    </dependency>

    <!-- springMVC需要的依赖 -->
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-webmvc</artifactId>
      <version>5.3.23</version>
    </dependency>
    <!-- AOP -->
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-aspects</artifactId>
      <version>5.3.23</version>
    </dependency>
    <!-- spring测试，与junit一起-->
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-test</artifactId>
      <version>5.3.23</version>
    </dependency>
    <!-- spring-jdbc:是一个标准Java API，用于在Java程序中连接和操作数据库。它提供了一套用于执行SQL语句的接口。 -->
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-jdbc</artifactId>
      <version>5.3.23</version>
    </dependency>

    <!-- mysql驱动:实现了JDBC API的一个库，专门用于连接MySQL数据库。如果你想要在Java程序中操作MySQL数据库，你需要引入MySQL驱动的依赖。 -->
    <!-- 必须要引入jdbc和mysql驱动依赖，JDBC是Java中用于数据库连接、查询和操作的一套标准API，而MySQL驱动是实现这套标准API的一个具体实现。 -->
    <!-- MySql 数据库更新为8.0及以上后，对应的应用程序数据库链接驱动包也要更新为8.0版本。否则会报驱动异常。 -->
    <dependency>
      <groupId>mysql</groupId>
      <artifactId>mysql-connector-java</artifactId>
      <version>8.0.23</version>
    </dependency>

    <!-- spring整合mybatis -->
    <dependency>
      <groupId>org.mybatis</groupId>
      <artifactId>mybatis-spring</artifactId>
      <version>1.3.2</version>
    </dependency>

    <!-- Druid连接池（数据源） -->
    <dependency>
      <groupId>com.alibaba</groupId>
      <artifactId>druid</artifactId>
      <version>1.1.12</version>
    </dependency>

    <!-- org.apache.ibatis.session.SqlSessionFactory
      是 Apache MyBatis 框架中用于创建 SqlSession 的工厂类。-->
    <dependency>
      <groupId>org.mybatis</groupId>
      <artifactId>mybatis</artifactId>
      <version>3.5.9</version> <!-- 使用最新的稳定版本 -->
    </dependency>

    <!--导入servlet相关的依赖-->
    <!--jstl支持-->
    <dependency>
      <groupId>javax.servlet</groupId>
      <artifactId>jstl</artifactId>
      <version>1.2</version>
    </dependency>
    <!--servlet编译环境-->
    <dependency>
      <groupId>javax.servlet</groupId>
      <artifactId>javax.servlet-api</artifactId>
      <version>3.1.0</version>
      <scope>provided</scope>
    </dependency>
    <!--jsp编译环境-->
    <dependency>
      <groupId>javax.servlet</groupId>
      <artifactId>jsp-api</artifactId>
      <version>2.0</version>
    </dependency>

    <!--Json-->
    <!--Jackson SpringMVC默认的Json解决方案选择是Jackson，所以只需要导入jackson的jar，即可使用。-->
    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-databind</artifactId>
      <version>2.9.8</version>
    </dependency>
    <!--FastJson-->
    <dependency>
      <groupId>com.alibaba</groupId>
      <artifactId>fastjson</artifactId>
      <version>1.2.53</version>
    </dependency>

    <!--servlet编译环境（其实也用不上，不过后面commons-fileupload有内置servlet为了排除它的影响还是自己导入吧）-->
    <dependency>
      <groupId>javax.servlet</groupId>
      <artifactId>javax.servlet-api</artifactId>
      <version>3.1.0</version>
      <scope>provided</scope>
    </dependency>

    <!--文件上传相关依赖-->
    <dependency>
      <groupId>commons-io</groupId>
      <artifactId>commons-io</artifactId>
      <version>2.4</version>
    </dependency>
    <dependency>
      <groupId>commons-fileupload</groupId>
      <artifactId>commons-fileupload</artifactId>
      <version>1.3.3</version>
      <!--排除掉其中servlet相关依赖-->
      <exclusions>
        <exclusion>
          <groupId>javax.servlet</groupId>
          <artifactId>servlet-api</artifactId>
        </exclusion>
      </exclusions>
    </dependency>

    <!--验证码相关-->
    <!--Kaptcha-->
    <dependency>
      <groupId>com.github.penggle</groupId>
      <artifactId>kaptcha</artifactId>
      <version>2.3.2</version>
      <exclusions>
        <exclusion>
          <groupId>javax.servlet</groupId>
          <artifactId>javax.servlet-api</artifactId>
        </exclusion>
      </exclusions>
    </dependency>

  </dependencies>

  <build>

    <finalName>spring05-springMVC</finalName>

    <!-- 更改maven编译规则，否则编译时识别不了源代码中处java文件以外的文件 -->
    <resources>
      <resource>
        <!-- 资源目录 -->
        <directory>src/main/java</directory>
        <includes>
          <include>*.xml</include> <!-- 新添加 */代表1级目录 **/代表多级目录 -->
          <include>**/*.xml</include> <!-- 新添加 */代表1级目录 **/代表多级目录 -->
        </includes>
        <filtering>true</filtering>
      </resource>
      <resource>
        <directory>src/main/resources</directory>
        <includes>
          <include>**/*</include>
        </includes>
      </resource>
    </resources>
  </build>

</project>
