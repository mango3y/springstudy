<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       http://www.springframework.org/schema/mvc/spring-mvc.xsd
">

    <!--告知springmvc哪些包中存在被注解的类-->
    <context:component-scan base-package="cn.mango3y.springstudy.controller"/>

    <!--注册注解开发驱动-->
    <mvc:annotation-driven/>

    <!--视图解析器
        作用：1、捕获后端控制器的返回值="index"
             2、解析：在返回值前后拼接 ==> "/index.jsp"
    -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <!--前缀-->
        <property name="prefix" value="/"/>
        <!--后缀-->
        <property name="suffix" value=".jsp"/>
    </bean>

    <!--
        额外的增加一个handler，且其requestMapping:"/**”可以匹配所有请求，但是优先级最低
        所以如果其他所有的handler都匹配不上，请求会转向"/**"，恰好，这个handler就是处理静态资源的
        处理方式:将请求转回到tomcat中名为default的Servlet
    -->
    <mvc:default-servlet-handler/>
    
    <!--<mvc:resources mapping="/css/**" location="/css/" />
    <mvc:resources mapping="/js/**" location="/js/" />-->

    <!--安装FastJson-->
    <mvc:annotation-driven>
        <!--安装FastJson，转换器-->
        <mvc:message-converters>
            <bean class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter">
                <!--声明转换类型：json-->
                <property name="supportedMediaTypes">
                    <list>
                        <value>application/json</value>
                    </list>
                </property>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>

    <!--异常解析器-->
    <bean class="cn.mango3y.springstudy.resolver.MyExceptionResolver"/>
    
    <mvc:interceptors>
        <!--配置登录拦截器-->
        <mvc:interceptor>
            <!--<mvc:mapping path="/inter/test1"/>
            <mvc:mapping path="/inter/test2"/>-->
            <mvc:mapping path="/inter/*"/>
            <!--记得一定要放行登录相关的方法-->
            <mvc:exclude-mapping path="/inter/login"/>
            <bean class="cn.mango3y.springstudy.interceptor.MyInterceptor"/>
        </mvc:interceptor>
        <!--配置文件上传拦截器-->
        <mvc:interceptor>
            <mvc:mapping path="/file/upload"/>
            <bean class="cn.mango3y.springstudy.interceptor.MyFileUploadInterceptor">
                <property name="maxFileUploadSize" value="1048576"/>
            </bean>
        </mvc:interceptor>
    </mvc:interceptors>
    
    
    <!--文件上传解析器-->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!--最大可上传的未见大小 单位byte 超出后会抛出MaxUploadSizeException，可以用异常解析器捕获-->
       <!-- <property name="maxUploadSize" value="1048576"/>--> <!--1MB-->
        <!--但实际上除了tomcat7之外其它的tomcat版本都无法抛出MaxUploadSizeException-->
        <!--所以我们要采用别的办法，自己写一个拦截器，在拦截器中实现上传文件大小的判断-->
    </bean>


</beans>