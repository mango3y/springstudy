<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!-- 配置文件参数化(参数占位符) -->
    <context:property-placeholder location="jdbc.properties"/>

    <!-- 连接池Druid与连接处PooledDataSource集成(二选一) -->
    <!-- 肯定选Druid -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!-- 基本配置 -->
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.jdbcUrl}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>

        <!-- Druid连接池可选参数 -->
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${jdbc.initialSize}"/>
        <property name="minIdle" value="${jdbc.minIdle}"/>
        <property name="maxActive" value="${jdbc.maxActive}"/>

        <!--配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${jdbc.maxWait}"/>

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}"/>

        <!--配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}"/>
    </bean>

    <!-- mybatis默认连接池一般不用，它要求你额外导入org.mybatis的依赖 -->
    <!--    <bean id="dataSource" class="org.apache.ibatis.datasource.pooled.PooledDataSource">-->
    <!--        <property name="driver" value="${driverClass}"/>-->
    <!--        <property name="url" value="${url}"/>-->
    <!--        <property name="username" value="$(username}"/>-->
    <!--        <property name="password" value="${password}"/>-->
    <!--    </bean>-->

    <!--工厂bean: 生成SqlSessionFactory -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 注入连接池 -->
        <property name="dataSource" ref="dataSource"/>
        <!-- 注入dao-mapper文件信息，如果映射文件和dao接口同包且同名，则此配置可以省略 -->
        <property name="mapperLocations">
            <list>
                <value>classpath:cn/mango3y/springstudy/dao/*.xml</value>
            </list>
        </property>
        <!-- 为dao-mapper文件中的实体 定义缺省包(默认)路径
            如：<select id="queryAll" resultType="User">中 User类可以不用写全类名
        -->
        <property name="typeAliasesPackage" value="cn.mango3y.springstudy.entity"/>
    </bean>

    <!-- mapperScannerConfigurer -->
    <!-- 管理DAO实现类的创建，并创建DAO对象，存入工厂管理 -->
    <!-- 所以可以直接从spring工厂取得DAO对象，比如context.getBean("userDAO")可直接获取根据UserDAO接口和mapper文件创造出来的UserDAO实现类 -->
    <bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- dao接口所在的包，如果有多个包，可以用逗号或分号分隔 -->
        <property name="basePackage" value="cn.mango3y.springstudy.dao"/>
        <!-- 如果工厂中只有一个Sq1SessionFactory的bean，此配置可省略 -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    <!-- Service -->
<!--    <bean id="userService" class="cn.mango3y.springstudy.service.UserServiceImpl">-->
<!--        &lt;!&ndash; 注意ref中的值是对应DA0接口的首字母小写的接口名 &ndash;&gt;-->
<!--        <property name="userDAO" ref="userDAO"/>-->
<!--    </bean>-->

    <!-- 事务相关 -->
    <!-- 1.引入一个事务管理器，其中依赖DataSource,借以获得连接，进而控制事务逻辑 -->
    <bean id="tx" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 基于事务管理器，进一步定制，生成一个额外功能:Advice。 -->
    <!-- 此Advice可以切入任何需要事务的方法，通过事务管理器为方法控制事务。 -->
<!--    <tx:advice id="txManager" transaction-manager="tx">-->
<!--        &lt;!&ndash; 事务属性 &ndash;&gt;-->
<!--        <tx:attributes>-->
<!--            &lt;!&ndash; 可以为不同方法指定不同的事务属性rollback-for、isolation等，更精密的控制事务 &ndash;&gt;-->
<!--&lt;!&ndash;            <tx:method name="queryUser" isolation="DEFAULT" propagation="SUPPORTS"&ndash;&gt;-->
<!--&lt;!&ndash;                       read-only="true" timeout="-1" rollback-for="Exception"/>&ndash;&gt;-->
<!--&lt;!&ndash;            <tx:method name="insertUser" isolation="DEFAULT" propagation="REQUIRED"&ndash;&gt;-->
<!--&lt;!&ndash;                       read-only="false" timeout="-1" rollback-for="Exception" />&ndash;&gt;-->

<!--            &lt;!&ndash; 如果一个事务的传播行为是SUPPORTS，则没必要设置其它的事务属性，因为它是不会有自己的事务的 &ndash;&gt;-->

<!--            &lt;!&ndash; 以User结尾的方法，切入此方法时，采用对应事务实行 &ndash;&gt;-->
<!--            &lt;!&ndash; 无rollback-for="Exception"，则只在遇到运行时异常时回滚，有时则非运行时都会回滚，更好 &ndash;&gt;-->
<!--            <tx:method name="*User" rollback-for="Exception"/>-->
<!--            &lt;!&ndash;以query开头的方法，切入此方法时，采用对应事务实行&ndash;&gt;-->
<!--            <tx:method name="query*" propagation="SUPPORTS"/>-->
<!--            &lt;!&ndash; 剩余所有方法&ndash;&gt;-->
<!--            <tx:method name="*"/>-->
<!--        </tx:attributes>-->
<!--    </tx:advice>-->

    <!-- 将通知编织到方法上 -->
<!--    <aop:config>-->
<!--        <aop:pointcut id="pc_tx" expression="execution(* cn.mango3y.springstudy.service.UserServiceImpl.*(..))"/>-->
<!--        <aop:advisor advice-ref="txManager" pointcut-ref="pc_tx"/>-->
<!--    </aop:config>-->

    <!-- 告知spring注解位置 -->
    <context:component-scan base-package="cn.mango3y.springstudy"/>

    <!-- @Transactional，指定tx为注解驱动 -->
    <tx:annotation-driven transaction-manager="tx"/>

    <!-- 添加如下配置，启用aop注解 -->
    <aop:aspectj-autoproxy/>
    
</beans>